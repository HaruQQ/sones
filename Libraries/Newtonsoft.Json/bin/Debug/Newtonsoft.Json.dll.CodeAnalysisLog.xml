<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 10.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="10.0">
 <Namespaces>
  <Namespace Name="Newtonsoft.Json">
   <Messages>
    <Message Id="Newtonsoft" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Newtonsoft' in namespace name 'Newtonsoft.Json'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Newtonsoft.Json.Bson">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Newtonsoft.Json.Bson' with another namespace.</Issue>
    </Message>
    <Message Id="Bson" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Bson' in namespace name 'Newtonsoft.Json.Bson'.</Issue>
    </Message>
    <Message Id="Newtonsoft" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Newtonsoft' in namespace name 'Newtonsoft.Json.Bson'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Newtonsoft.Json.Converters">
   <Messages>
    <Message Id="Newtonsoft" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Newtonsoft' in namespace name 'Newtonsoft.Json.Converters'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Newtonsoft.Json.Linq">
   <Messages>
    <Message Id="Newtonsoft" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Newtonsoft' in namespace name 'Newtonsoft.Json.Linq'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Newtonsoft.Json.Linq.ComponentModel">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Newtonsoft.Json.Linq.ComponentModel' with another namespace.</Issue>
    </Message>
    <Message Id="Newtonsoft" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Newtonsoft' in namespace name 'Newtonsoft.Json.Linq.ComponentModel'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Newtonsoft.Json.Schema">
   <Messages>
    <Message Id="Newtonsoft" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Newtonsoft' in namespace name 'Newtonsoft.Json.Schema'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Newtonsoft.Json.Serialization">
   <Messages>
    <Message Id="Newtonsoft" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Newtonsoft' in namespace name 'Newtonsoft.Json.Serialization'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\bin\Debug\Newtonsoft.Json.dll">
   <Modules>
    <Module Name="newtonsoft.json.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Newtonsoft.Json.dll' with a strong name key.</Issue>
      </Message>
      <Message Id="Newtonsoft" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Newtonsoft' in assembly name 'Newtonsoft.Json.dll'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'Newtonsoft.Json.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Newtonsoft.Json">
       <Types>
        <Type Name="ConstructorHandling" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AllowNonPublicDefaultConstructor" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NonPublic" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'NonPublic' in member name 'ConstructorHandling.AllowNonPublicDefaultConstructor' exists as a discrete term. If your usage is intended to be single word, case it as 'Nonpublic' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonArrayAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Name="RemoveSetter" Certainty="95" Level="Error">Remove the property setter from 'JsonArrayAttribute.AllowNullItems' or reduce its accessibility because it corresponds to positional argument 'allowNullItems'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="JsonConvert" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="79">Initialize all static fields in 'JsonConvert' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeAnonymousType`1(System.String,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="anonymousTypeObject" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="582">Parameter 'anonymousTypeObject' of 'JsonConvert.DeserializeAnonymousType&lt;T&gt;(string, T)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="641">In method 'JsonConvert.DeserializeObject(string, Type, JsonSerializerSettings)', object 'sr' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sr' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeXmlNode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="710">Modify member 'JsonConvert.DeserializeXmlNode(string)' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeXmlNode(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="721">Modify member 'JsonConvert.DeserializeXmlNode(string, string)' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsJsonPrimitive(System.Object)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="447">'value', a parameter, is cast to type 'IConvertible' multiple times in method 'JsonConvert.IsJsonPrimitive(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="679">In method 'JsonConvert.PopulateObject(string, object, JsonSerializerSettings)', object 'sr' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sr' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="527">In method 'JsonConvert.SerializeObject(object, Formatting, JsonSerializerSettings)', object 'sw' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sw' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeXmlNode(System.Xml.XmlNode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="698">Modify member 'JsonConvert.SerializeXmlNode(XmlNode)' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString(System.Enum)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="182">In externally visible method 'JsonConvert.ToString(Enum)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="354">'value', a parameter, is cast to type 'IConvertible' multiple times in method 'JsonConvert.ToString(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString(System.String,System.Char)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="delimter" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConvert.cs" Line="338">In method 'JsonConvert.ToString(string, char)', correct the spelling of 'delimter' in parameter name 'delimter' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonConverterAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'JsonConverterAttribute', if possible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateJsonConverterInstance(System.Type)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonConverterAttribute.cs" Line="47">'JsonConverterAttribute.CreateJsonConverterInstance(Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonObjectAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Name="RemoveSetter" Certainty="95" Level="Error">Remove the property setter from 'JsonObjectAttribute.MemberSerialization' or reduce its accessibility because it corresponds to positional argument 'memberSerialization'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="JsonPropertyAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Name="RemoveSetter" Certainty="95" Level="Error">Remove the property setter from 'JsonPropertyAttribute.PropertyName' or reduce its accessibility because it corresponds to positional argument 'propertyName'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="JsonReader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CurrentState" Kind="Property" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_CurrentState(Newtonsoft.Json.JsonReader+State)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonReader.cs" Line="113">'JsonReader.CurrentState.set(JsonReader.State)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetTypeForCloseToken(Newtonsoft.Json.JsonToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="JsonToken" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonReader.cs" Line="379">Correct the spelling of the unrecognized token 'JsonToken' in the literal '"Not a valid close JsonToken: "'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonReader.cs" Line="369">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonReader.GetTypeForCloseToken(JsonToken)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsStartToken(Newtonsoft.Json.JsonToken)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonReader.cs" Line="364">Method 'JsonReader.IsStartToken(JsonToken)' passes a literal string as parameter 'message' of a call to 'MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)'. Retrieve the following string(s) from a resource table instead: "Unexpected JsonToken value.".</Issue>
            </Message>
            <Message Id="JsonToken" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonReader.cs" Line="364">Correct the spelling of the unrecognized token 'JsonToken' in the literal '"Unexpected JsonToken value."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetStateBasedOnCurrent()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="JsonType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonReader.cs" Line="335">Correct the spelling of the unrecognized token 'JsonType' in the literal '"While setting the reader state back to current object an unexpected JsonType was..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonReader.cs" Line="387">Change 'JsonReader.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonReader.cs" Line="387">Rename 'JsonReader.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonReaderException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'JsonReaderException': protected JsonReaderException(SerializationInfo, StreamingContext).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'JsonReaderException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="JsonSerializationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'JsonSerializationException': protected JsonSerializationException(SerializationInfo, StreamingContext).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'JsonSerializationException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="JsonSerializer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#HasClassConverter(Newtonsoft.Json.Serialization.JsonContract,Newtonsoft.Json.JsonConverter&amp;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonSerializer.cs" Line="422">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializer.HasClassConverter(JsonContract, out JsonConverter)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Error" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Error" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'JsonSerializer.Error' so that it no longer conflicts with the reserved language keyword 'Error'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSerializerSettings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Converters" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'JsonSerializerSettings.Converters' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonTextReader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ParseValue()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonTextReader.cs" Line="555">'JsonTextReader.ParseValue()' has a cyclomatic complexity of 34. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidIdentifierChar(System.Char)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonTextReader.cs" Line="528">Parameter 'value' of 'JsonTextReader.ValidIdentifierChar(char)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonTextWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#WriteEnd(Newtonsoft.Json.JsonToken)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="JsonToken" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonTextWriter.cs" Line="191">Correct the spelling of the unrecognized token 'JsonToken' in the literal '"Invalid JsonToken: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteValueInternal(System.String,Newtonsoft.Json.JsonToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="token" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonTextWriter.cs" Line="250">Parameter 'token' of 'JsonTextWriter.WriteValueInternal(string, JsonToken)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonValidatingReader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CurrentMemberSchema" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CurrentMemberSchema()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonValidatingReader.cs" Line="178">'JsonValidatingReader.CurrentMemberSchema.get()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="CurrentPropertyName" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonValidatingReader.cs" Line="178">Correct the spelling of the unrecognized token 'CurrentPropertyName' in the literal '"CurrentPropertyName has not been set on scope."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Newtonsoft.Json.IJsonLineInfo.HasLineInfo()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonValidatingReader.cs" Line="596">Make 'JsonValidatingReader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IJsonLineInfo.HasLineInfo()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Newtonsoft.Json.IJsonLineInfo.LineNumber" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#Newtonsoft.Json.IJsonLineInfo.get_LineNumber()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonValidatingReader.cs" Line="604">Make 'JsonValidatingReader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IJsonLineInfo.LineNumber.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Newtonsoft.Json.IJsonLineInfo.LinePosition" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#Newtonsoft.Json.IJsonLineInfo.get_LinePosition()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonValidatingReader.cs" Line="613">Make 'JsonValidatingReader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IJsonLineInfo.LinePosition.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#RaiseError(System.String,Newtonsoft.Json.Schema.JsonSchemaModel)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="schema" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonValidatingReader.cs" Line="205">Parameter 'schema' of 'JsonValidatingReader.RaiseError(string, JsonSchemaModel)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Schema" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Schema(Newtonsoft.Json.Schema.JsonSchema)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonValidatingReader.cs" Line="246">'JsonValidatingReader.Schema.set(JsonSchema)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ValidateCurrentToken()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonValidatingReader.cs" Line="408">Call the 'ArgumentOutOfRangeException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonValidatingReader+SchemaScope" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonValidatingReader.cs" Line="79">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonValidatingReader.SchemaScope.GetRequiredProperties(JsonSchemaModel)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'JsonWriter' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AutoCompleteClose(Newtonsoft.Json.JsonToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="JsonType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="533">Correct the spelling of the unrecognized token 'JsonType' in the literal '"Unknown JsonType: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="disposing" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="1106">Parameter 'disposing' of 'JsonWriter.Dispose(bool)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCloseTokenForType(Newtonsoft.Json.Linq.JTokenType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="472">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonWriter.GetCloseTokenForType(JTokenType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypeForCloseToken(Newtonsoft.Json.JsonToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="457">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonWriter.GetTypeForCloseToken(JsonToken)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsEndToken(Newtonsoft.Json.JsonToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="405">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonWriter.IsEndToken(JsonToken)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsStartToken(Newtonsoft.Json.JsonToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="418">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonWriter.IsStartToken(JsonToken)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#stateArray" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Member" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="Warning">'JsonWriter.stateArray' is a multidimensional array. Replace it with a jagged array if possible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="1101">Change 'JsonWriter.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="1101">Rename 'JsonWriter.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteConstructorDate(Newtonsoft.Json.JsonReader)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="389">'JsonWriter.WriteConstructorDate(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="391">'JsonWriter.WriteConstructorDate(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="397">'JsonWriter.WriteConstructorDate(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="399">'JsonWriter.WriteConstructorDate(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="EndConstructor" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="399">Correct the spelling of the unrecognized token 'EndConstructor' in the literal '"Unexpected token while reading date constructor. Expected EndConstructor, got "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteState" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_WriteState()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="165">'JsonWriter.WriteState.get()' creates an exception of type 'JsonWriterException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#WriteToken(Newtonsoft.Json.JsonReader)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="304">In externally visible method 'JsonWriter.WriteToken(JsonReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteToken(Newtonsoft.Json.JsonReader,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="377">Method 'JsonWriter.WriteToken(JsonReader, int)' passes a literal string as parameter 'message' of a call to 'MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)'. Retrieve the following string(s) from a resource table instead: "Unexpected token type.".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteValue(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="1006">'value', a parameter, is cast to type 'IConvertible' multiple times in method 'JsonWriter.WriteValue(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="1069">'value', a parameter, is cast to type 'byte[]' multiple times in method 'JsonWriter.WriteValue(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteWhitespace(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Whitespace" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json" File="JsonWriter.cs" Line="1091">The discrete term 'Whitespace' in member name 'JsonWriter.WriteWhitespace(string)' should be expressed as a compound word, 'WhiteSpace'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonWriterException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'JsonWriterException': protected JsonWriterException(SerializationInfo, StreamingContext).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'JsonWriterException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="PreserveReferencesHandling" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If enumeration name 'PreserveReferencesHandling' is singular, change it to a plural form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TypeNameHandling" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If enumeration name 'TypeNameHandling' is singular, change it to a plural form.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Newtonsoft.Json.Bson">
       <Types>
        <Type Name="BsonReader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Bson" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Bson' in type name 'BsonReader'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ReadCodeWScope()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Bson" File="BsonReader.cs" Line="207">Call the 'ArgumentOutOfRangeException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadNormal()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Bson" File="BsonReader.cs" Line="341">Call the 'ArgumentOutOfRangeException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BsonWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Bson" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Bson' in type name 'BsonWriter'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CalculateSize(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Bson" File="BsonWriter.cs" Line="191">The 'this' parameter (or 'Me' in Visual Basic) of 'BsonWriter.CalculateSize(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CalculateSizeWithLength(System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Bson" File="BsonWriter.cs" Line="201">The 'this' parameter (or 'Me' in Visual Basic) of 'BsonWriter.CalculateSizeWithLength(int, bool)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypeNumber(Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Bson" File="BsonWriter.cs" Line="163">The 'this' parameter (or 'Me' in Visual Basic) of 'BsonWriter.GetTypeNumber(JToken)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteToken(Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Bson" File="BsonWriter.cs" Line="101">'t', a parameter, is cast to type 'JValue' multiple times in method 'BsonWriter.WriteToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Newtonsoft.Json.Converters">
       <Types>
        <Type Name="BinaryConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetByteArray(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="BinaryConverter.cs" Line="83">'BinaryConverter.GetByteArray(object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="BinaryConverter.cs" Line="71">The 'this' parameter (or 'Me' in Visual Basic) of 'BinaryConverter.GetByteArray(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="BinaryConverter.cs" Line="102">'BinaryConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="BinaryConverter.cs" Line="108">'BinaryConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="BinaryConverter.cs" Line="123">'BinaryConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="BinaryConverter.cs" Line="99">In externally visible method 'BinaryConverter.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="BinaryConverter.cs" Line="61">In externally visible method 'BinaryConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CustomCreationConverter`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="CustomCreationConverter.cs" Line="60">In externally visible method 'CustomCreationConverter&lt;T&gt;.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'serializer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CustomCreationConverter" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="CustomCreationConverter.cs" Line="44">Correct the spelling of the unrecognized token 'CustomCreationConverter' in the literal '"CustomCreationConverter should only be used while deserializing."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DataSetConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CanConvert(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataSetConverter.cs" Line="95">In member 'DataSetConverter.CanConvert(Type)', change parameter name 'valueType' to 'objectType' in order to match the identifier as it has been declared in 'JsonConverter.CanConvert(Type)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataSetConverter.cs" Line="70">In method 'DataSetConverter.ReadJson(JsonReader, Type, JsonSerializer)', call System.IDisposable.Dispose on object 'ds' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataSetConverter.cs" Line="70">Be sure to set the DataSet Locale property wherever 'DataSetConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an instance of that type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataSetConverter.cs" Line="74">In externally visible method 'DataSetConverter.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataSetConverter.cs" Line="49">In externally visible method 'DataSetConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DataTableConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CanConvert(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataTableConverter.cs" Line="147">In member 'DataTableConverter.CanConvert(Type)', change parameter name 'valueType' to 'objectType' in order to match the identifier as it has been declared in 'JsonConverter.CanConvert(Type)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetColumnDataType(Newtonsoft.Json.JsonToken)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataTableConverter.cs" Line="135">Call the 'ArgumentOutOfRangeException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataTableConverter.cs" Line="76">In method 'DataTableConverter.ReadJson(JsonReader, Type, JsonSerializer)', call System.IDisposable.Dispose on object 'dt' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataTableConverter.cs" Line="81">In method 'DataTableConverter.ReadJson(JsonReader, Type, JsonSerializer)', call System.IDisposable.Dispose on object 'dt' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataTableConverter.cs" Line="81">Be sure to set the DataTable Locale property wherever 'DataTableConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an instance of that type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataTableConverter.cs" Line="74">In externally visible method 'DataTableConverter.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataTableConverter.cs" Line="47">In externally visible method 'DataTableConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="DataTableConverter.cs" Line="55">In externally visible method 'DataTableConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'serializer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EntityKeyMemberConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="EntityKeyMemberConverter.cs" Line="109">In externally visible method 'EntityKeyMemberConverter.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'reader' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="EntityKeyMemberConverter.cs" Line="119">In externally visible method 'EntityKeyMemberConverter.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'serializer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="EntityKeyMemberConverter.cs" Line="58">In externally visible method 'EntityKeyMemberConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HtmlColorConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CanConvert(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="HtmlColorConverter.cs" Line="56">In member 'HtmlColorConverter.CanConvert(Type)', change parameter name 'valueType' to 'objectType' in order to match the identifier as it has been declared in 'JsonConverter.CanConvert(Type)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="HtmlColorConverter.cs" Line="45">In externally visible method 'HtmlColorConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IsoDateTimeConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="IsoDateTimeConverter.cs" Line="104">'IsoDateTimeConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="IsoDateTimeConverter.cs" Line="110">'IsoDateTimeConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="IsoDateTimeConverter.cs" Line="101">In externally visible method 'IsoDateTimeConverter.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="IsoDateTimeConverter.cs" Line="81">'IsoDateTimeConverter.WriteJson(JsonWriter, object, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="IsoDateTimeConverter.cs" Line="84">In externally visible method 'IsoDateTimeConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JavaScriptDateTimeConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="JavaScriptDateTimeConverter.cs" Line="62">'JavaScriptDateTimeConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="JavaScriptDateTimeConverter.cs" Line="68">'JavaScriptDateTimeConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="JavaScriptDateTimeConverter.cs" Line="73">'JavaScriptDateTimeConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="JavaScriptDateTimeConverter.cs" Line="82">'JavaScriptDateTimeConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="JavaScriptDateTimeConverter.cs" Line="59">In externally visible method 'JavaScriptDateTimeConverter.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="JavaScriptDateTimeConverter.cs" Line="38">'JavaScriptDateTimeConverter.WriteJson(JsonWriter, object, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="JavaScriptDateTimeConverter.cs" Line="41">In externally visible method 'JavaScriptDateTimeConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringEnumConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="StringEnumConverter.cs" Line="77">'StringEnumConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="StringEnumConverter.cs" Line="88">'StringEnumConverter.ReadJson(JsonReader, Type, JsonSerializer)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="StringEnumConverter.cs" Line="74">In externally visible method 'StringEnumConverter.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="StringEnumConverter.cs" Line="48">In externally visible method 'StringEnumConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlNodeConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CanConvert(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="591">In member 'XmlNodeConverter.CanConvert(Type)', change parameter name 'valueType' to 'objectType' in order to match the identifier as it has been declared in 'JsonConverter.CanConvert(Type)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateElement(System.String,System.Xml.XmlDocument,System.String,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="485">The 'this' parameter (or 'Me' in Visual Basic) of 'XmlNodeConverter.CreateElement(string, XmlDocument, string, XmlNamespaceManager)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeNode(Newtonsoft.Json.JsonReader,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="DeserializeRootElementName" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="499">Correct the spelling of the unrecognized token 'DeserializeRootElementName' in the literal '"JSON root object has multiple properties. The root object must have a single pro..."'.</Issue>
            </Message>
            <Message Id="JsonToken" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="531">Correct the spelling of the unrecognized token 'JsonToken' in the literal '"Unexpected JsonToken when deserializing node: "'.</Issue>
            </Message>
            <Message Id="specifing" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="499">Correct the spelling of the unrecognized token 'specifing' in the literal '"JSON root object has multiple properties. The root object must have a single pro..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeValue(Newtonsoft.Json.JsonReader,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="301">'XmlNodeConverter.DeserializeValue(JsonReader, XmlDocument, XmlNamespaceManager, string, XmlNode)' has a cyclomatic complexity of 41. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="JsonToken" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="417">Correct the spelling of the unrecognized token 'JsonToken' in the literal '"Unexpected JsonToken: "'.</Issue>
            </Message>
            <Message Id="XmlDeclaration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="342">Correct the spelling of the unrecognized token 'XmlDeclaration' in the literal '"Unexpected property name encountered while deserializing XmlDeclaration: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPrefix(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="563">The 'this' parameter (or 'Me' in Visual Basic) of 'XmlNodeConverter.GetPrefix(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPropertyName(System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="XmlNodeType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="96">Correct the spelling of the unrecognized token 'XmlNodeType' in the literal '"Unexpected XmlNodeType when getting node name: "'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="74">The 'this' parameter (or 'Me' in Visual Basic) of 'XmlNodeConverter.GetPropertyName(XmlNode)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNamespaceAttribute(System.String,System.String&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="544">The 'this' parameter (or 'Me' in Visual Basic) of 'XmlNodeConverter.IsNamespaceAttribute(string, out string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="XmlDocuments" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="273">Correct the spelling of the unrecognized token 'XmlDocuments' in the literal '"XmlNodeConverter only supports deserializing XmlDocuments"'.</Issue>
            </Message>
            <Message Id="XmlNodeConverter" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="291">Correct the spelling of the unrecognized token 'XmlNodeConverter' in the literal '"XmlNodeConverter can only convert JSON that begins with an object."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="273">Correct the spelling of the unrecognized token 'XmlNodeConverter' in the literal '"XmlNodeConverter only supports deserializing XmlDocuments"'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="290">In externally visible method 'XmlNodeConverter.ReadJson(JsonReader, Type, JsonSerializer)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeNode(Newtonsoft.Json.JsonWriter,System.Xml.XmlNode,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="162">'XmlNodeConverter.SerializeNode(JsonWriter, XmlNode, bool)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="XmlNodeType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="256">Correct the spelling of the unrecognized token 'XmlNodeType' in the literal '"Unexpected XmlNodeType when serializing nodes: "'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="184">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'XmlNodeConverter.SerializeNode(JsonWriter, XmlNode, bool)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="186">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'XmlNodeConverter.SerializeNode(JsonWriter, XmlNode, bool)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValueAttributes(System.Xml.XmlAttributeCollection)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="573">The 'this' parameter (or 'Me' in Visual Basic) of 'XmlNodeConverter.ValueAttributes(XmlAttributeCollection)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValueNodes(System.Xml.XmlNodeList)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="578">'XmlNodeConverter.ValueNodes(XmlNodeList)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="578">The 'this' parameter (or 'Me' in Visual Basic) of 'XmlNodeConverter.ValueNodes(XmlNodeList)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Converters" File="XmlNodeConverter.cs" Line="68">In externally visible method 'XmlNodeConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Newtonsoft.Json.Linq">
       <Types>
        <Type Name="Extensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AsJEnumerable`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="308">'source', a parameter, is cast to type 'IJEnumerable&lt;T&gt;' multiple times in method 'Extensions.AsJEnumerable&lt;T&gt;(this IEnumerable&lt;T&gt;)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Children`2(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="229">On method 'Extensions.Children&lt;T, U&gt;(this IEnumerable&lt;T&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="229">On method 'Extensions.Children&lt;T, U&gt;(this IEnumerable&lt;T&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Value`1(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="146">On method 'Extensions.Value&lt;U&gt;(this IEnumerable&lt;JToken&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="146">On method 'Extensions.Value&lt;U&gt;(this IEnumerable&lt;JToken&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="146">Change either member or parameter name 'value' so that one differs from the other.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Value`2(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="158">On method 'Extensions.Value&lt;T, U&gt;(this IEnumerable&lt;T&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="158">On method 'Extensions.Value&lt;T, U&gt;(this IEnumerable&lt;T&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="158">Change either member or parameter name 'value' so that one differs from the other.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Values`1(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="135">On method 'Extensions.Values&lt;U&gt;(this IEnumerable&lt;JToken&gt;)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="135">On method 'Extensions.Values&lt;U&gt;(this IEnumerable&lt;JToken&gt;)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Values`1(System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="124">On method 'Extensions.Values&lt;U&gt;(this IEnumerable&lt;JToken&gt;, object)', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="Extensions.cs" Line="124">On method 'Extensions.Values&lt;U&gt;(this IEnumerable&lt;JToken&gt;, object)', prefix generic type parameter name 'U' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IJEnumerable`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'IJEnumerable&lt;T&gt;' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="JArray" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'JArray' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#FromObject(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="140">In method 'JArray.FromObject(object)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FromObject(System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="151">In method 'JArray.FromObject(object, JsonSerializer)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(Newtonsoft.Json.JsonReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="106">'JArray.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="109">'JArray.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="115">'JArray.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="JArray" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="106">Correct the spelling of the unrecognized token 'JArray' in the literal '"Error reading JArray from JsonReader."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="115">Correct the spelling of the unrecognized token 'JArray' in the literal '"Error reading JArray from JsonReader."'.</Issue>
            </Message>
            <Message Id="JsonReader" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="106">Correct the spelling of the unrecognized token 'JsonReader' in the literal '"Error reading JArray from JsonReader."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="115">Correct the spelling of the unrecognized token 'JsonReader' in the literal '"Error reading JArray from JsonReader."'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="103">In externally visible method 'JArray.Load(JsonReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="129">In method 'JArray.Parse(string)', call System.IDisposable.Dispose on object 'new StringReader(json)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="288">Make 'JArray' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;JToken&gt;.CopyTo(JToken[], int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.IsReadOnly" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.get_IsReadOnly()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="304">Make 'JArray' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;JToken&gt;.IsReadOnly.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JArray.cs" Line="167">In externally visible method 'JArray.WriteTo(JsonWriter, params JsonConverter[])', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JConstructor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'JConstructor' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Newtonsoft.Json.Linq.JConstructor)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="75">In externally visible method 'JConstructor.JConstructor(JConstructor)', validate parameter 'other' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(Newtonsoft.Json.JsonReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="179">'JConstructor.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="183">'JConstructor.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="189">'JConstructor.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="JConstructor" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="179">Correct the spelling of the unrecognized token 'JConstructor' in the literal '"Error reading JConstructor from JsonReader."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="189">Correct the spelling of the unrecognized token 'JConstructor' in the literal '"Error reading JConstructor from JsonReader."'.</Issue>
            </Message>
            <Message Id="JsonReader" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="179">Correct the spelling of the unrecognized token 'JsonReader' in the literal '"Error reading JConstructor from JsonReader."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="189">Correct the spelling of the unrecognized token 'JsonReader' in the literal '"Error reading JConstructor from JsonReader."'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="176">In externally visible method 'JConstructor.Load(JsonReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JConstructor.cs" Line="128">In externally visible method 'JConstructor.WriteTo(JsonWriter, params JsonConverter[])', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JContainer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'JContainer' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Newtonsoft.Json.Linq.JContainer)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="77">'JContainer.JContainer(JContainer)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;JContainer..ctor(JContainer)&#xD;&#xA;JContainer.Add(Object):Void&#xD;&#xA;JToken.get_Last():JToken</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="77">'JContainer.JContainer(JContainer)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;JContainer..ctor(JContainer)&#xD;&#xA;JContainer.Add(Object):Void&#xD;&#xA;JToken.get_Last():JToken&#xD;&#xA;JContainer.AddInternal(Boolean, JToken, Object):Void&#xD;&#xA;JContainer.AddItem(Boolean, JToken, JToken):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="77">'JContainer.JContainer(JContainer)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;JContainer..ctor(JContainer)&#xD;&#xA;JContainer.Add(Object):Void&#xD;&#xA;JToken.get_Last():JToken&#xD;&#xA;JContainer.AddInternal(Boolean, JToken, Object):Void&#xD;&#xA;JContainer.AddItem(Boolean, JToken, JToken):Void&#xD;&#xA;JContainer.ValidateTo&#xD;&#xA;JContainer.IndexOfItem(JToken):Int32&#xD;&#xA;JToken.Children():JEnumerable&lt;JToken&gt;</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="77">'JContainer.JContainer(JContainer)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;JContainer..ctor(JContainer)&#xD;&#xA;JContainer.Add(Object):Void&#xD;&#xA;JToken.get_Last():JToken&#xD;&#xA;JContainer.AddInternal(Boolean, JToken, Object):Void&#xD;&#xA;JContainer.AddItem(Boolean, JToken, JToken):Void&#xD;&#xA;JContainer.ValidateTo&#xD;&#xA;JContainer.IndexOfItem(JToken):Int32&#xD;&#xD;&#xA;JContainer.OnListChanged(ListChangedEventArgs):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="77">'JContainer.JContainer(JContainer)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;JContainer..ctor(JContainer)&#xD;&#xA;JContainer.Add(Object):Void&#xD;&#xA;JToken.get_Last():JToken&#xD;&#xA;JContainer.AddInternal(Boolean, JToken, Object):Void&#xD;&#xA;JContainer.AddItem(Boolean, JToken, JToken):Void&#xD;&#xA;JContainer.ValidateToken(JToken, JToken):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckReentrancy()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="ObservableCollectionCannotChangeObservableCollection" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="96">Correct the spelling of the unrecognized token 'ObservableCollectionCannotChangeObservableCollection' in the literal '"ObservableCollection_CannotChangeObservableCollection"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateFromContent(System.Object)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="587">'content', a parameter, is cast to type 'JToken' multiple times in method 'JContainer.CreateFromContent(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="585">The 'this' parameter (or 'Me' in Visual Basic) of 'JContainer.CreateFromContent(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnsureValue(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="823">'value', a parameter, is cast to type 'JToken' multiple times in method 'JContainer.EnsureValue(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="DoNotHideBaseClassMethods" Category="Microsoft.Design" CheckId="CA1061" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="818">Change or remove 'JContainer.EnsureValue(object)' because it hides a more specific base class method: 'JToken.EnsureValue(JToken)'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="818">The 'this' parameter (or 'Me' in Visual Basic) of 'JContainer.EnsureValue(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsMultiContent(System.Object)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="258">The 'this' parameter (or 'Me' in Visual Basic) of 'JContainer.IsMultiContent(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadContentFrom(Newtonsoft.Json.JsonReader)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="628">'parent', a variable, is cast to type 'JProperty' multiple times in method 'JContainer.ReadContentFrom(JsonReader)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.Clear()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="786">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;JToken&gt;.Clear()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.Contains(Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="791">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;JToken&gt;.Contains(JToken)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="796">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;JToken&gt;.CopyTo(JToken[], int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.Count" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Count()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="802">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;JToken&gt;.Count.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.IsReadOnly" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.ICollection`1&lt;Newtonsoft.Json.Linq.JToken&gt;.get_IsReadOnly()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="807">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;JToken&gt;.IsReadOnly.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;.IndexOf(Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="756">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList&lt;JToken&gt;.IndexOf(JToken)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="761">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList&lt;JToken&gt;.Insert(int, JToken)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IList`1&lt;Newtonsoft.Json.Linq.JToken&gt;.RemoveAt(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="766">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList&lt;JToken&gt;.RemoveAt(int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.ICollection.CopyTo(System.Array,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="887">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection.CopyTo(Array, int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.ICollection.Count" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.ICollection.get_Count()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="893">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection.Count.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.ICollection.IsSynchronized" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.ICollection.get_IsSynchronized()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="898">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection.IsSynchronized.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.ICollection.SyncRoot" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.ICollection.get_SyncRoot()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="904">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection.SyncRoot.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IList.Clear()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="837">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList.Clear()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IList.Contains(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="842">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList.Contains(object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IList.IndexOf(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="847">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList.IndexOf(object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IList.Insert(System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="852">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList.Insert(int, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IList.IsFixedSize" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.IList.get_IsFixedSize()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="858">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList.IsFixedSize.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IList.IsReadOnly" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.IList.get_IsReadOnly()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="863">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList.IsReadOnly.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IList.RemoveAt(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="872">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList.RemoveAt(int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="919">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.AddIndex(PropertyDescriptor)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.AddNew()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="928">'JContainer.IBindingList.AddNew()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="931">'JContainer.IBindingList.AddNew()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="923">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.AddNew()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.AllowEdit" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.ComponentModel.IBindingList.get_AllowEdit()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="941">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.AllowEdit.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.AllowNew" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.ComponentModel.IBindingList.get_AllowNew()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="946">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.AllowNew.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.AllowRemove" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.ComponentModel.IBindingList.get_AllowRemove()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="951">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.AllowRemove.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="955">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.ApplySort(PropertyDescriptor, ListSortDirection)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="960">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.Find(PropertyDescriptor, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.IsSorted" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.ComponentModel.IBindingList.get_IsSorted()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="966">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.IsSorted.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="970">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.RemoveIndex(PropertyDescriptor)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.RemoveSort()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="974">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.RemoveSort()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.SortDirection" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.ComponentModel.IBindingList.get_SortDirection()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="980">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.SortDirection.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.SortProperty" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.ComponentModel.IBindingList.get_SortProperty()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="985">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.SortProperty.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.SupportsChangeNotification" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.ComponentModel.IBindingList.get_SupportsChangeNotification()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="990">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.SupportsChangeNotification.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.SupportsSearching" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.ComponentModel.IBindingList.get_SupportsSearching()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="995">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.SupportsSearching.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.ComponentModel.IBindingList.SupportsSorting" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.ComponentModel.IBindingList.get_SupportsSorting()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="1000">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IBindingList.SupportsSorting.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="740">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ITypedList.GetItemProperties(PropertyDescriptor[])' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JContainer.cs" Line="735">Make 'JContainer' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ITypedList.GetListName(PropertyDescriptor[])' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JEnumerable`1" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'JEnumerable&lt;T&gt;' to end in 'Collection'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'JEnumerable&lt;T&gt;' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'JEnumerable&lt;T&gt;' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Empty" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Remove 'JEnumerable&lt;T&gt;.Empty' from 'JEnumerable&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JObject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'JObject' to end in 'Dictionary'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Add(System.String,Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="329">In member 'JObject.Add(string, JToken)', change parameter name 'propertyName' to 'key' in order to match the identifier as it has been declared in 'IDictionary&lt;string, JToken&gt;.Add(string, JToken)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FromObject(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="285">In method 'JObject.FromObject(object)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FromObject(System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="296">In method 'JObject.FromObject(object, JsonSerializer)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="212">In member 'JObject.this[string]', change parameter name 'propertyName' to 'key' in order to match the identifier as it has been declared in 'IDictionary&lt;string, JToken&gt;.this[string]'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(Newtonsoft.Json.JsonReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="249">'JObject.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="252">'JObject.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="260">'JObject.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="JObject" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="249">Correct the spelling of the unrecognized token 'JObject' in the literal '"Error reading JObject from JsonReader."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="260">Correct the spelling of the unrecognized token 'JObject' in the literal '"Error reading JObject from JsonReader."'.</Issue>
            </Message>
            <Message Id="JsonReader" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="249">Correct the spelling of the unrecognized token 'JsonReader' in the literal '"Error reading JObject from JsonReader."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="260">Correct the spelling of the unrecognized token 'JsonReader' in the literal '"Error reading JObject from JsonReader."'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="246">In externally visible method 'JObject.Load(JsonReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="274">In method 'JObject.Parse(string)', call System.IDisposable.Dispose on object 'new StringReader(json)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="349">In member 'JObject.Remove(string)', change parameter name 'propertyName' to 'key' in order to match the identifier as it has been declared in 'IDictionary&lt;string, JToken&gt;.Remove(string)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Clear()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="392">Make 'JObject' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;string, JToken&gt;&gt;.Clear()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Contains(System.Collections.Generic.KeyValuePair`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="397">Make 'JObject' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;string, JToken&gt;&gt;.Contains(KeyValuePair&lt;string, JToken&gt;)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.CopyTo(System.Collections.Generic.KeyValuePair`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;[],System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="406">Make 'JObject' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;string, JToken&gt;&gt;.CopyTo(KeyValuePair&lt;string, JToken&gt;[], int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.IsReadOnly" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.get_IsReadOnly()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="436">Make 'JObject' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;string, JToken&gt;&gt;.IsReadOnly.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.ContainsKey(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="334">Make 'JObject' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;string, JToken&gt;.ContainsKey(string)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.Keys" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.IDictionary`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.get_Keys()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="340">'JObject.IDictionary&lt;string, JToken&gt;.Keys.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="340">Make 'JObject' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;string, JToken&gt;.Keys.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.Values" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.IDictionary`2&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.get_Values()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="379">'JObject.IDictionary&lt;string, JToken&gt;.Values.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="379">Make 'JObject' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;string, JToken&gt;.Values.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#TryGetValue(System.String,Newtonsoft.Json.Linq.JToken&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="365">In member 'JObject.TryGetValue(string, out JToken)', change parameter name 'propertyName' to 'key' in order to match the identifier as it has been declared in 'IDictionary&lt;string, JToken&gt;.TryGetValue(string, out JToken)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JObject.cs" Line="312">In externally visible method 'JObject.WriteTo(JsonWriter, params JsonConverter[])', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JPath" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Evaluate(Newtonsoft.Json.Linq.JToken,System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="Reserved" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JPath.cs" Line="150">'JPath.Evaluate(JToken, bool)' creates an exception of type 'IndexOutOfRangeException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JPath.cs" Line="129">'JPath.Evaluate(JToken, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JPath.cs" Line="134">'JPath.Evaluate(JToken, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JPath.cs" Line="160">'JPath.Evaluate(JToken, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseIndexer(System.Char)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JPath.cs" Line="98">'JPath.ParseIndexer(char)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JPath.cs" Line="105">'JPath.ParseIndexer(char)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JPath.cs" Line="108">'JPath.ParseIndexer(char)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseMain()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JPath.cs" Line="49">'JPath.ParseMain()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JPath.cs" Line="61">'JPath.ParseMain()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JProperty" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'JProperty' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Newtonsoft.Json.Linq.JProperty)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="104">In externally visible method 'JProperty.JProperty(JProperty)', validate parameter 'other' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddItem(System.Boolean,Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="110">'JProperty.AddItem(bool, JToken, JToken)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClearItems()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="153">'JProperty.ClearItems()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetItem(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="118">Call the 'ArgumentOutOfRangeException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertItem(System.Int32,Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="143">'JProperty.InsertItem(int, JToken)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(Newtonsoft.Json.JsonReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="253">'JProperty.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="256">'JProperty.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="264">'JProperty.Load(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="JProperty" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="253">Correct the spelling of the unrecognized token 'JProperty' in the literal '"Error reading JProperty from JsonReader."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="264">Correct the spelling of the unrecognized token 'JProperty' in the literal '"Error reading JProperty from JsonReader."'.</Issue>
            </Message>
            <Message Id="JsonReader" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="253">Correct the spelling of the unrecognized token 'JsonReader' in the literal '"Error reading JProperty from JsonReader."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="264">Correct the spelling of the unrecognized token 'JsonReader' in the literal '"Error reading JProperty from JsonReader."'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="250">In externally visible method 'JProperty.Load(JsonReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveItem(Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="133">'JProperty.RemoveItem(JToken)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveItemAt(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="138">'JProperty.RemoveItemAt(int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetItem(System.Int32,Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="126">Call the 'ArgumentOutOfRangeException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JProperty.cs" Line="234">In externally visible method 'JProperty.WriteTo(JsonWriter, params JsonConverter[])', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JRaw" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'JRaw' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Create(Newtonsoft.Json.JsonReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JRaw.cs" Line="45">Object 'sw' can be disposed more than once in method 'JRaw.Create(JsonReader)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 45</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JToken" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'JToken' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="121">In method 'JToken.DeepEquals(JToken, JToken)', correct the spelling of 't' in parameter name 't1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="121">In method 'JToken.DeepEquals(JToken, JToken)', correct the spelling of 't' in parameter name 't2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnsureValue(Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="366">'value', a parameter, is cast to type 'JProperty' multiple times in method 'JToken.EnsureValue(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FromObject(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1053">In method 'JToken.FromObject(object)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FromObject(System.Object,Newtonsoft.Json.JsonSerializer)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1064">In method 'JToken.FromObject(object, JsonSerializer)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Newtonsoft.Json.IJsonLineInfo.HasLineInfo()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1122">Make 'JToken' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IJsonLineInfo.HasLineInfo()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Newtonsoft.Json.IJsonLineInfo.LineNumber" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#Newtonsoft.Json.IJsonLineInfo.get_LineNumber()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1128">Make 'JToken' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IJsonLineInfo.LineNumber.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Newtonsoft.Json.IJsonLineInfo.LinePosition" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#Newtonsoft.Json.IJsonLineInfo.get_LinePosition()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1133">Make 'JToken' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IJsonLineInfo.LinePosition.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ReadFrom(Newtonsoft.Json.JsonReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1084">'JToken.ReadFrom(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1104">'JToken.ReadFrom(JsonReader)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="JToken" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1084">Correct the spelling of the unrecognized token 'JToken' in the literal '"Error reading JToken from JsonReader."'.</Issue>
            </Message>
            <Message Id="JsonReader" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1084">Correct the spelling of the unrecognized token 'JsonReader' in the literal '"Error reading JToken from JsonReader."'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1081">In externally visible method 'JToken.ReadFrom(JsonReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1012">Make 'JToken' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;JToken&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JToken.cs" Line="1007">Make 'JToken' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error">The property name 'JToken.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JTokenReader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetEndToken(Newtonsoft.Json.Linq.JContainer)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="112">Method 'JTokenReader.GetEndToken(JContainer)' passes a literal string as parameter 'message' of a call to 'MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)'. Retrieve the following string(s) from a resource table instead: "Unexpected JContainer type.".</Issue>
            </Message>
            <Message Id="JContainer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="112">Correct the spelling of the unrecognized token 'JContainer' in the literal '"Unexpected JContainer type."'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="100">The 'this' parameter (or 'Me' in Visual Basic) of 'JTokenReader.GetEndToken(JContainer)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Newtonsoft.Json.IJsonLineInfo.HasLineInfo()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="200">Make 'JTokenReader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IJsonLineInfo.HasLineInfo()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Newtonsoft.Json.IJsonLineInfo.LineNumber" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#Newtonsoft.Json.IJsonLineInfo.get_LineNumber()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="211">Make 'JTokenReader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IJsonLineInfo.LineNumber.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Newtonsoft.Json.IJsonLineInfo.LinePosition" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#Newtonsoft.Json.IJsonLineInfo.get_LinePosition()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="226">Make 'JTokenReader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IJsonLineInfo.LinePosition.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ReadToEnd()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="89">The 'this' parameter (or 'Me' in Visual Basic) of 'JTokenReader.ReadToEnd()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetToken(Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="195">Method 'JTokenReader.SetToken(JToken)' passes a literal string as parameter 'message' of a call to 'MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)'. Retrieve the following string(s) from a resource table instead: "Unexpected JTokenType.".</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="168">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTokenReader.SetToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="171">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTokenReader.SetToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="174">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTokenReader.SetToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="177">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTokenReader.SetToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="180">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTokenReader.SetToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="183">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTokenReader.SetToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="186">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTokenReader.SetToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="189">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTokenReader.SetToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="192">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTokenReader.SetToken(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="JTokenType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenReader.cs" Line="195">Correct the spelling of the unrecognized token 'JTokenType' in the literal '"Unexpected JTokenType."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JTokenWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddValue(Newtonsoft.Json.Linq.JValue,Newtonsoft.Json.JsonToken)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="token" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JTokenWriter.cs" Line="143">Parameter 'token' of 'JTokenWriter.AddValue(JValue, JsonToken)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JValue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'JValue' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Newtonsoft.Json.Linq.JValue)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JValue.cs" Line="53">In externally visible method 'JValue.JValue(JValue)', validate parameter 'other' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JValue.cs" Line="330">Method 'JValue.WriteTo(JsonWriter, params JsonConverter[])' passes a literal string as parameter 'message' of a call to 'MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)'. Retrieve the following string(s) from a resource table instead: "Unexpected token type.".</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq" File="JValue.cs" Line="292">In externally visible method 'JValue.WriteTo(JsonWriter, params JsonConverter[])', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Newtonsoft.Json.Linq.ComponentModel">
       <Types>
        <Type Name="JPropertyDescriptor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SetValue(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq\ComponentModel" File="JPropertyDescriptor.cs" Line="106">'value', a parameter, is cast to type 'JToken' multiple times in method 'JPropertyDescriptor.SetValue(object, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JTypeDescriptor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetTokenPropertyType(Newtonsoft.Json.Linq.JToken)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Linq\ComponentModel" File="JTypeDescriptor.cs" Line="66">'token', a parameter, is cast to type 'JValue' multiple times in method 'JTypeDescriptor.GetTokenPropertyType(JToken)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Newtonsoft.Json.Schema">
       <Types>
        <Type Name="Extensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="Extensions.cs" Line="76">In externally visible method 'Extensions.Validate(this JToken, JsonSchema, ValidationEventHandler)', validate parameter 'source' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSchema" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Enum" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'JsonSchema.Enum' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Identity" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'JsonSchema.Identity' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Items" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'JsonSchema.Items' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Options" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'JsonSchema.Options' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchema.cs" Line="239">In method 'JsonSchema.Parse(string, JsonSchemaResolver)', call System.IDisposable.Dispose on object 'new StringReader(json)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Properties" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'JsonSchema.Properties' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchema.cs" Line="275">In method 'JsonSchema.ToString()', call System.IDisposable.Dispose on object 'writer' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error">The property name 'JsonSchema.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSchemaBuilder" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#BuildSchema()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="83">'JsonSchemaBuilder.BuildSchema()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="103">'JsonSchemaBuilder.BuildSchema()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MapType(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="383">'JsonSchemaBuilder.MapType(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessEnum()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="220">'JsonSchemaBuilder.ProcessEnum()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessIdentity()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="296">'JsonSchemaBuilder.ProcessIdentity()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="302">'JsonSchemaBuilder.ProcessIdentity()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessItems()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="330">'JsonSchemaBuilder.ProcessItems()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessOptions()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="241">'JsonSchemaBuilder.ProcessOptions()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="260">'JsonSchemaBuilder.ProcessOptions()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="265">'JsonSchemaBuilder.ProcessOptions()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="268">'JsonSchemaBuilder.ProcessOptions()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="274">'JsonSchemaBuilder.ProcessOptions()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessProperties()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="339">'JsonSchemaBuilder.ProcessProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="347">'JsonSchemaBuilder.ProcessProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessSchemaProperty(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="125">'JsonSchemaBuilder.ProcessSchemaProperty(string)' has a cyclomatic complexity of 30. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessType()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="368">'JsonSchemaBuilder.ProcessType()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaBuilder.cs" Line="375">'JsonSchemaBuilder.ProcessType()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSchemaException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'JsonSchemaException': protected JsonSchemaException(SerializationInfo, StreamingContext).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'JsonSchemaException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="JsonSchemaGenerator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CurrentType" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CurrentType()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaGenerator.cs" Line="91">'JsonSchemaGenerator.CurrentType.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GenerateInternal(System.Type,Newtonsoft.Json.Required)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaGenerator.cs" Line="218">'JsonSchemaGenerator.GenerateInternal(Type, Required)' is coupled with 36 different types from 13 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.</Issue>
            </Message>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaGenerator.cs" Line="218">'JsonSchemaGenerator.GenerateInternal(Type, Required)' has a cyclomatic complexity of 26. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaGenerator.cs" Line="234">'JsonSchemaGenerator.GenerateInternal(Type, Required)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaGenerator.cs" Line="291">'JsonSchemaGenerator.GenerateInternal(Type, Required)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDescription(System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaGenerator.cs" Line="181">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSchemaGenerator.GetDescription(Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetJsonSchemaType(System.Type,Newtonsoft.Json.Required)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaGenerator.cs" Line="383">'JsonSchemaGenerator.GetJsonSchemaType(Type, Required)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaGenerator.cs" Line="339">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSchemaGenerator.GetJsonSchemaType(Type, Required)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTitle(System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaGenerator.cs" Line="171">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSchemaGenerator.GetTitle(Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSchemaNodeCollection" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetKeyForItem(Newtonsoft.Json.Schema.JsonSchemaNode)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaNodeCollection.cs" Line="34">In externally visible method 'JsonSchemaNodeCollection.GetKeyForItem(JsonSchemaNode)', validate parameter 'item' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSchemaResolver" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LoadedSchemas" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'JsonSchemaResolver.LoadedSchemas' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSchemaType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If enumeration name 'JsonSchemaType' is singular, change it to a plural form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="JsonSchemaWriter" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter,System.String,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaWriter.cs" Line="205">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSchemaWriter.WritePropertyIfNotNull(JsonWriter, string, object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteType(System.String,Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Schema" File="JsonSchemaWriter.cs" Line="178">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSchemaWriter.WriteType(string, JsonWriter, JsonSchemaType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValidationEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'ValidationEventHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Newtonsoft.Json.Serialization">
       <Types>
        <Type Name="DefaultContractResolver" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateProperties(Newtonsoft.Json.Serialization.JsonObjectContract)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="seralizable" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="392">Correct the spelling of the unrecognized token 'seralizable' in the literal '"Null collection of seralizable members returned."'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="390">In externally visible method 'DefaultContractResolver.CreateProperties(JsonObjectContract)', validate parameter 'contract' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateProperty(Newtonsoft.Json.Serialization.JsonObjectContract,System.Reflection.MemberInfo)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="461">In externally visible method 'DefaultContractResolver.CreateProperty(JsonObjectContract, MemberInfo)', validate parameter 'contract' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="428">In externally visible method 'DefaultContractResolver.CreateProperty(JsonObjectContract, MemberInfo)', validate parameter 'member' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DefaultMembersSearchFlags" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in member name 'DefaultContractResolver.DefaultMembersSearchFlags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetParametrizedConstructor(System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="164">The 'this' parameter (or 'Me' in Visual Basic) of 'DefaultContractResolver.GetParametrizedConstructor(Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSerializableMembers(System.Type)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="95">Change 'List&lt;MemberInfo&gt;' in 'DefaultContractResolver.GetSerializableMembers(Type)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsValidCallback(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[],System.Type,System.Reflection.MethodInfo,System.Type&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="348">'DefaultContractResolver.IsValidCallback(MethodInfo, ParameterInfo[], Type, MethodInfo, ref Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="351">'DefaultContractResolver.IsValidCallback(MethodInfo, ParameterInfo[], Type, MethodInfo, ref Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="354">'DefaultContractResolver.IsValidCallback(MethodInfo, ParameterInfo[], Type, MethodInfo, ref Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="357">'DefaultContractResolver.IsValidCallback(MethodInfo, ParameterInfo[], Type, MethodInfo, ref Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="362">'DefaultContractResolver.IsValidCallback(MethodInfo, ParameterInfo[], Type, MethodInfo, ref Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DefaultContractResolver.cs" Line="367">'DefaultContractResolver.IsValidCallback(MethodInfo, ParameterInfo[], Type, MethodInfo, ref Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DynamicValueProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetValue(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DynamicValueProvider.cs" Line="92">In externally visible method 'DynamicValueProvider.GetValue(object)', validate parameter 'target' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValue(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="DynamicValueProvider.cs" Line="72">In externally visible method 'DynamicValueProvider.SetValue(object, object)', validate parameter 'target' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ErrorEventArgs" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="ErrorEventArgs.cs" Line="29">In member 'ErrorEventArgs.ErrorEventArgs(object, ErrorContext)', consider replacing the data type identifier 'Object' in parameter name 'currentObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonArrayContract" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateWrapper(System.Object)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonArrayContract.cs" Line="78">'list', a parameter, is cast to type 'IList' multiple times in method 'JsonArrayContract.CreateWrapper(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsTypeGenericCollectionInterface(System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonArrayContract.cs" Line="96">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonArrayContract.IsTypeGenericCollectionInterface(Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonContract" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DefaultCreatorNonPublic" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NonPublic" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'NonPublic' in member name 'JsonContract.DefaultCreatorNonPublic' exists as a discrete term. If your usage is intended to be single word, case it as 'Nonpublic' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonDictionaryContract" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateWrapper(System.Object)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonDictionaryContract.cs" Line="81">'dictionary', a parameter, is cast to type 'IDictionary' multiple times in method 'JsonDictionaryContract.CreateWrapper(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsTypeGenericDictionaryInterface(System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonDictionaryContract.cs" Line="99">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonDictionaryContract.IsTypeGenericDictionaryInterface(Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonObjectContract" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ParametrizedConstructor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Parametrized" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Parametrized' in member name 'JsonObjectContract.ParametrizedConstructor' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonPropertyCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddProperty(Newtonsoft.Json.Serialization.JsonProperty)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonPropertyCollection.cs" Line="68">In externally visible method 'JsonPropertyCollection.AddProperty(JsonProperty)', validate parameter 'property' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonPropertyCollection.cs" Line="59">In externally visible method 'JsonPropertyCollection.GetKeyForItem(JsonProperty)', validate parameter 'item' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSerializerInternalReader" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CheckedRead(Newtonsoft.Json.JsonReader)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="348">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalReader.CheckedRead(JsonReader)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateJObject(Newtonsoft.Json.JsonReader)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="147">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalReader.CreateJObject(JsonReader)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateJToken(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Serialization.JsonContract)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="126">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalReader.CreateJToken(JsonReader, JsonContract)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateObject(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.Serialization.JsonContract,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="319">'contract', a parameter, is cast to type 'JsonDictionaryContract' multiple times in method 'JsonSerializerInternalReader.CreateObject(JsonReader, Type, JsonContract, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="321">'contract', a parameter, is cast to type 'JsonDictionaryContract' multiple times in method 'JsonSerializerInternalReader.CreateObject(JsonReader, Type, JsonContract, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="327">'contract', a parameter, is cast to type 'JsonObjectContract' multiple times in method 'JsonSerializerInternalReader.CreateObject(JsonReader, Type, JsonContract, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="329">'contract', a parameter, is cast to type 'JsonObjectContract' multiple times in method 'JsonSerializerInternalReader.CreateObject(JsonReader, Type, JsonContract, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateObjectFromNonDefaultConstructor(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Serialization.JsonObjectContract,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="599">'JsonSerializerInternalReader.CreateObjectFromNonDefaultConstructor(JsonReader, JsonObjectContract, string)' has a cyclomatic complexity of 29. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnsureArrayContract(System.Type,Newtonsoft.Json.Serialization.JsonContract)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="336">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalReader.EnsureArrayContract(Type, JsonContract)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormatValueForPrint(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="402">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalReader.FormatValueForPrint(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HasDefinedType(System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="373">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalReader.HasDefinedType(Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Populate(Newtonsoft.Json.JsonReader,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="61">'contract', a variable, is cast to type 'JsonArrayContract' multiple times in method 'JsonSerializerInternalReader.Populate(JsonReader, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="78">'contract', a variable, is cast to type 'JsonDictionaryContract' multiple times in method 'JsonSerializerInternalReader.Populate(JsonReader, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="80">'contract', a variable, is cast to type 'JsonObjectContract' multiple times in method 'JsonSerializerInternalReader.Populate(JsonReader, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRequiredProperty(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Serialization.JsonProperty,System.Collections.Generic.Dictionary`2&lt;Newtonsoft.Json.Serialization.JsonProperty,Newtonsoft.Json.Serialization.JsonSerializerInternalReader+RequiredValue&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalReader.cs" Line="756">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalReader.SetRequiredProperty(JsonReader, JsonProperty, Dictionary&lt;JsonProperty, JsonSerializerInternalReader.RequiredValue&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSerializerInternalWriter" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetPropertyName(System.Collections.DictionaryEntry)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="485">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalWriter.GetPropertyName(DictionaryEntry)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HasFlag(Newtonsoft.Json.PreserveReferencesHandling,Newtonsoft.Json.PreserveReferencesHandling)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="323">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalWriter.HasFlag(PreserveReferencesHandling, PreserveReferencesHandling)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HasFlag(Newtonsoft.Json.TypeNameHandling,Newtonsoft.Json.TypeNameHandling)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="328">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalWriter.HasFlag(TypeNameHandling, TypeNameHandling)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeValue(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonConverter,Newtonsoft.Json.Serialization.JsonContract)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="119">'contract', a parameter, is cast to type 'JsonArrayContract' multiple times in method 'JsonSerializerInternalWriter.SerializeValue(JsonWriter, object, JsonConverter, JsonContract)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="123">'contract', a parameter, is cast to type 'JsonArrayContract' multiple times in method 'JsonSerializerInternalWriter.SerializeValue(JsonWriter, object, JsonConverter, JsonContract)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="113">'contract', a parameter, is cast to type 'JsonDictionaryContract' multiple times in method 'JsonSerializerInternalWriter.SerializeValue(JsonWriter, object, JsonConverter, JsonContract)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="109">'contract', a parameter, is cast to type 'JsonObjectContract' multiple times in method 'JsonSerializerInternalWriter.SerializeValue(JsonWriter, object, JsonConverter, JsonContract)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="123">'value', a parameter, is cast to type 'IEnumerable' multiple times in method 'JsonSerializerInternalWriter.SerializeValue(JsonWriter, object, JsonConverter, JsonContract)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="119">'value', a parameter, is cast to type 'IList' multiple times in method 'JsonSerializerInternalWriter.SerializeValue(JsonWriter, object, JsonConverter, JsonContract)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="105">'value', a parameter, is cast to type 'JToken' multiple times in method 'JsonSerializerInternalWriter.SerializeValue(JsonWriter, object, JsonConverter, JsonContract)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="127">'JsonSerializerInternalWriter.SerializeValue(JsonWriter, object, JsonConverter, JsonContract)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteMemberInfoProperty(Newtonsoft.Json.JsonWriter,System.Object,System.Object,Newtonsoft.Json.Serialization.JsonProperty,Newtonsoft.Json.Serialization.JsonContract)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="169">Parameter 'value' of 'JsonSerializerInternalWriter.WriteMemberInfoProperty(JsonWriter, object, object, JsonProperty, JsonContract)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteTypeProperty(Newtonsoft.Json.JsonWriter,System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="JsonSerializerInternalWriter.cs" Line="317">The 'this' parameter (or 'Me' in Visual Basic) of 'JsonSerializerInternalWriter.WriteTypeProperty(JsonWriter, Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReflectionValueProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetValue(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="ReflectionValueProvider.cs" Line="83">In externally visible method 'ReflectionValueProvider.GetValue(object)', validate parameter 'target' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValue(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Serialization" File="ReflectionValueProvider.cs" Line="66">In externally visible method 'ReflectionValueProvider.SetValue(object, object)', validate parameter 'target' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Newtonsoft.Json.Utilities">
       <Types>
        <Type Name="CollectionUtils" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CreateAndPopulateList(System.Type,System.Action`2&lt;System.Collections.IList,System.Boolean&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionUtils.cs" Line="513">'CollectionUtils.CreateAndPopulateList(Type, Action&lt;IList, bool&gt;)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionUtils.cs" Line="539">'CollectionUtils.CreateAndPopulateList(Type, Action&lt;IList, bool&gt;)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateCollectionWrapper(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionUtils.cs" Line="416">'CollectionUtils.CreateCollectionWrapper(object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateDictionaryWrapper(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionUtils.cs" Line="472">'CollectionUtils.CreateDictionaryWrapper(object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateListWrapper(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionUtils.cs" Line="443">'CollectionUtils.CreateListWrapper(object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSingleItem`1(System.Collections.Generic.IList`1&lt;!!0&gt;,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionUtils.cs" Line="319">'CollectionUtils.GetSingleItem&lt;T&gt;(IList&lt;T&gt;, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CollectionWrapper`1" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.Collections.IList)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="52">'list', a parameter, is cast to type 'ICollection&lt;T&gt;' multiple times in method 'CollectionWrapper&lt;T&gt;.CollectionWrapper(IList)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IList.IndexOf(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="170">'CollectionWrapper&lt;T&gt;.IList.IndexOf(object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="ICollection" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="170">Correct the spelling of the unrecognized token 'ICollection' in the literal '"Wrapped ICollection&lt;T&gt; does not support IndexOf."'.</Issue>
            </Message>
            <Message Id="IndexOf" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="170">Correct the spelling of the unrecognized token 'IndexOf' in the literal '"Wrapped ICollection&lt;T&gt; does not support IndexOf."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IList.Insert(System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="189">'CollectionWrapper&lt;T&gt;.IList.Insert(int, object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="ICollection" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="189">Correct the spelling of the unrecognized token 'ICollection' in the literal '"Wrapped ICollection&lt;T&gt; does not support Insert."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IList.Item[System.Int32]" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#System.Collections.IList.get_Item(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="211">'CollectionWrapper&lt;T&gt;.IList.Item.get(int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="ICollection" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="211">Correct the spelling of the unrecognized token 'ICollection' in the literal '"Wrapped ICollection&lt;T&gt; does not support indexer."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#System.Collections.IList.set_Item(System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="218">'CollectionWrapper&lt;T&gt;.IList.Item.set(int, object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="ICollection" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="218">Correct the spelling of the unrecognized token 'ICollection' in the literal '"Wrapped ICollection&lt;T&gt; does not support indexer."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IList.RemoveAt(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="181">'CollectionWrapper&lt;T&gt;.IList.RemoveAt(int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="ICollection" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="181">Correct the spelling of the unrecognized token 'ICollection' in the literal '"Wrapped ICollection&lt;T&gt; does not support RemoveAt."'.</Issue>
            </Message>
            <Message Id="RemoveAt" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="CollectionWrapper.cs" Line="181">Correct the spelling of the unrecognized token 'RemoveAt' in the literal '"Wrapped ICollection&lt;T&gt; does not support RemoveAt."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConvertUtils" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Convert(System.Object,System.Globalization.CultureInfo,System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="136">'ConvertUtils.Convert(object, CultureInfo, Type)' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="218">'initialValue', a parameter, is cast to type 'INullable' multiple times in method 'ConvertUtils.Convert(object, CultureInfo, Type)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="149">'initialValue', a parameter, is cast to type 'string' multiple times in method 'ConvertUtils.Convert(object, CultureInfo, Type)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="176">'initialValue', a parameter, is cast to type 'string' multiple times in method 'ConvertUtils.Convert(object, CultureInfo, Type)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="178">'initialValue', a parameter, is cast to type 'string' multiple times in method 'ConvertUtils.Convert(object, CultureInfo, Type)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="180">'initialValue', a parameter, is cast to type 'string' multiple times in method 'ConvertUtils.Convert(object, CultureInfo, Type)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="159">'initialValue', a parameter, is cast to type 'string' multiple times in method 'ConvertUtils.Convert(object, CultureInfo, Type)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="173">'initialValue', a parameter, is cast to type 'string' multiple times in method 'ConvertUtils.Convert(object, CultureInfo, Type)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="214">'ConvertUtils.Convert(object, CultureInfo, Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="221">'ConvertUtils.Convert(object, CultureInfo, Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.TimeSpan.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="180">Because the behavior of 'TimeSpan.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ConvertUtils.Convert(object, CultureInfo, Type)' with a call to 'TimeSpan.Parse(string, IFormatProvider)'. If the result of 'TimeSpan.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnsureTypeAssignable(System.Object,System.Type,System.Type)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="388">'ConvertUtils.EnsureTypeAssignable(object, Type, Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToValue(System.Data.SqlTypes.INullable)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="407">'ConvertUtils.ToValue(INullable)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryConvert`1(System.Object,System.Globalization.CultureInfo,!!0&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="culture" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="251">Parameter 'culture' of 'ConvertUtils.TryConvert&lt;T&gt;(object, CultureInfo, out T)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryConvertOrCast`1(System.Object,System.Globalization.CultureInfo,!!0&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="culture" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ConvertUtils.cs" Line="352">Parameter 'culture' of 'ConvertUtils.TryConvertOrCast&lt;T&gt;(object, CultureInfo, out T)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DateTimeUtils" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#ToSerializationMode(System.DateTimeKind)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="DateTimeUtils.cs" Line="35">Method 'DateTimeUtils.ToSerializationMode(DateTimeKind)' passes a literal string as parameter 'message' of a call to 'MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)'. Retrieve the following string(s) from a resource table instead: "Unexpected DateTimeKind value.".</Issue>
            </Message>
            <Message Id="DateTimeKind" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="DateTimeUtils.cs" Line="35">Correct the spelling of the unrecognized token 'DateTimeKind' in the literal '"Unexpected DateTimeKind value."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DictionaryWrapper`2" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CopyTo(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;[],System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="DictionaryWrapper.cs" Line="166">In externally visible method 'DictionaryWrapper&lt;TKey, TValue&gt;.CopyTo(KeyValuePair&lt;TKey, TValue&gt;[], int)', validate parameter 'array' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DynamicWrapper" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetStrongKey()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Newtonsoft" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="DynamicWrapper.cs" Line="59">Correct the spelling of the unrecognized token 'Newtonsoft' in the literal '"Should have a Newtonsoft.Json.Dynamic.snk as an embedded resource."'.</Issue>
            </Message>
            <Message Id="snk" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="DynamicWrapper.cs" Line="59">Correct the spelling of the unrecognized token 'snk' in the literal '"Should have a Newtonsoft.Json.Dynamic.snk as an embedded resource."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumUtils" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetFlagsValues`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="EnumUtils.cs" Line="71">'EnumUtils.GetFlagsValues&lt;T&gt;(T)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNamesAndValues`1(System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="EnumUtils.cs" Line="136">'EnumUtils.GetNamesAndValues&lt;TUnderlyingType&gt;(Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumValues`1" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetKeyForItem(Newtonsoft.Json.Utilities.EnumValue`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="EnumValues.cs" Line="38">In externally visible method 'EnumValues&lt;T&gt;.GetKeyForItem(EnumValue&lt;T&gt;)', validate parameter 'item' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LateBoundDelegateFactory" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CreateDefaultConstructor(System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="LateBoundDelegateFactory.cs" Line="121">'LateBoundDelegateFactory.CreateDefaultConstructor(Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateGet`1(System.Reflection.MemberInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="LateBoundDelegateFactory.cs" Line="24">'LateBoundDelegateFactory.CreateGet&lt;T&gt;(MemberInfo)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateGet`1(System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="LateBoundDelegateFactory.cs" Line="135">'LateBoundDelegateFactory.CreateGet&lt;T&gt;(PropertyInfo)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateMethodHandler(System.Reflection.MethodBase)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="LateBoundDelegateFactory.cs" Line="85">'method', a parameter, is cast to type 'MethodInfo' multiple times in method 'LateBoundDelegateFactory.CreateMethodHandler(MethodBase)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="LateBoundDelegateFactory.cs" Line="87">'method', a parameter, is cast to type 'MethodInfo' multiple times in method 'LateBoundDelegateFactory.CreateMethodHandler(MethodBase)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateSet`1(System.Reflection.MemberInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="LateBoundDelegateFactory.cs" Line="46">'LateBoundDelegateFactory.CreateSet&lt;T&gt;(MemberInfo)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ListWrapper`1" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.Collections.IList)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ListWrapper.cs" Line="52">'list', a parameter, is cast to type 'IList&lt;T&gt;' multiple times in method 'ListWrapper&lt;T&gt;.ListWrapper(IList)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MiscellaneousUtils" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#TryAction`1(Newtonsoft.Json.Utilities.Creator`1&lt;!!0&gt;,!!0&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="MiscellaneousUtils.cs" Line="31">Modify 'MiscellaneousUtils.TryAction&lt;T&gt;(Creator&lt;T&gt;, out T)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReflectionUtils" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetCollectionItemType(System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ReflectionUtils.cs" Line="285">'ReflectionUtils.GetCollectionItemType(Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ReflectionUtils.cs" Line="295">'ReflectionUtils.GetCollectionItemType(Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDictionaryKeyValueTypes(System.Type,System.Type&amp;,System.Type&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ReflectionUtils.cs" Line="307">'ReflectionUtils.GetDictionaryKeyValueTypes(Type, out Type, out Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ReflectionUtils.cs" Line="323">'ReflectionUtils.GetDictionaryKeyValueTypes(Type, out Type, out Type)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ItemsUnitializedValue`1(System.Collections.Generic.IList`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ReflectionUtils.cs" Line="378">'ReflectionUtils.ItemsUnitializedValue&lt;T&gt;(IList&lt;T&gt;)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringUtils" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Indent(System.String,System.Int32,System.Char)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="StringUtils.cs" Line="190">In method 'StringUtils.Indent(string, int, char)', call System.IDisposable.Dispose on object 'sr' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="StringUtils.cs" Line="191">In method 'StringUtils.Indent(string, int, char)', call System.IDisposable.Dispose on object 'sw' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NumberLines(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="StringUtils.cs" Line="229">In method 'StringUtils.NumberLines(string)', call System.IDisposable.Dispose on object 'sr' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="StringUtils.cs" Line="230">In method 'StringUtils.NumberLines(string)', call System.IDisposable.Dispose on object 'sw' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReplaceNewLines(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="StringUtils.cs" Line="258">In method 'StringUtils.ReplaceNewLines(string, string)', call System.IDisposable.Dispose on object 'sr' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValidationUtils" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#ArgumentIsPositive`1(!!0,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ValidationUtils.cs" Line="128">Method 'ValidationUtils.ArgumentIsPositive&lt;T&gt;(T, string)' passes a literal string as parameter 'message' of a call to 'MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)'. Retrieve the following string(s) from a resource table instead: "Positive number required.".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArgumentNotNegative(System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ValidationUtils.cs" Line="104">Method 'ValidationUtils.ArgumentNotNegative(int, string)' passes a literal string as parameter 'message' of a call to 'MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)'. Retrieve the following string(s) from a resource table instead: "Argument cannot be negative.".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArgumentNotZero(System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-08-13 11:12:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="K:\Sones2010\OSE\1.1\Libraries\Newtonsoft.Json\Utilities" File="ValidationUtils.cs" Line="116">Method 'ValidationUtils.ArgumentNotZero(int, string)' passes a literal string as parameter 'message' of a call to 'MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)'. Retrieve the following string(s) from a resource table instead: "Argument cannot be zero.".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182126(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506">
   <Name>Avoid excessive class coupling</Name>
   <Description>Types and methods with a high degree of class coupling can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb397994(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813">
   <Name>Avoid unsealed attributes</Name>
   <Description>Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes.</Description>
   <Resolution Name="Default">Seal {0}, if possible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182267(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816">
   <Name>Call GC.SuppressFinalize correctly</Name>
   <Description>Call GC.SuppressFinalize to suppress finalization of your instance once Dispose has been called. Objects that implement IDisposable should call SuppressFinalize from the IDisposable.Dispose method to prevent the garbage collector from calling Object.Finalize on an object that does not require it.</Description>
   <Resolution Name="NotCalled">Change {0} to call {1}. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182269(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberShouldBeCompoundWord">The discrete term '{0}' in member name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019">
   <Name>Define accessors for attribute arguments</Name>
   <Description>Provide accessors for both named and positional arguments. Each positional argument on an attribute should declare a read-only property with the same name (but different casing). Each named argument should provide a read/write property with the same name (but different casing).</Description>
   <Resolution Name="RemoveSetter">Remove the property setter from {0} or reduce its accessibility because it corresponds to positional argument {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182136(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 45</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
   <Name>Do not declare static members on generic types</Name>
   <Description>The syntax for calling static members on generic types is complex as the type parameter has to be specified for each call.</Description>
   <Resolution Name="Default">Remove {0} from {1} or make it an instance member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182139(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotHideBaseClassMethods" Category="Microsoft.Design" CheckId="CA1061">
   <Name>Do not hide base class methods</Name>
   <Description>Defining a method in a derived class with the same name and parameters that are more weakly typed as one that is defined in the base class will obstruct access to the method defined in the base class.</Description>
   <Resolution Name="Default">Change or remove {0} because it hides a more specific base class method: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182143(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="Reserved">{0} creates an exception of type {1}, an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714">
   <Name>Flags enums should have plural names</Name>
   <Description>An enumeration marked with FlagsAttribute should have a plural name.</Description>
   <Resolution Name="Default">If enumeration name {0} is singular, change it to a plural form.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264486(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="MethodTypeParameterMoreMeaningfulName">On method {0}, consider providing a more meaningful name than generic type parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715">
   <Name>Identifiers should have correct prefix</Name>
   <Description>Prefix interface names with the letter 'I' to indicate that the type is an interface, as in IFormattable. Prefix generic type parameter names with the letter 'T' and provide them with descriptive names, as in Dictionary&lt;TKey, TValue&gt;, unless a single 'T' is completely self-explanatory, as in Collection&lt;T&gt;. Use Pascal casing for both interface and type parameter names. Use abbreviations sparingly. Do not use the underscore character. Do use similar names when defining a class/interface pair where the class is a standard implementation of the interface. The names should differ only by the letter I prefixed on the interface name, as with Component and IComponent.</Description>
   <Resolution Name="MethodTypeParameter">On method {0}, prefix generic type parameter name {1} with 'T'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182243(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182244(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="RenameDispose">Rename {0} to 'Dispose' and ensure that it is declared as public and sealed.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059">
   <Name>Members should not expose certain concrete types</Name>
   <Description>Members should not expose certain concrete types.</Description>
   <Resolution Name="Xml">Modify member {0} so that it no longer exposes the concrete type {1}. Use IXPathNavigable to represent XML data sources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182160(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719">
   <Name>Parameter names should not match member names</Name>
   <Description>Parameter names should be distinct from member names.</Description>
   <Resolution Name="Default">Change either member or parameter name {0} so that one differs from the other.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182252(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814">
   <Name>Prefer jagged arrays over multidimensional</Name>
   <Description>Multidimensional arrays can have a negative impact on performance. Use a jagged array if possible.</Description>
   <Resolution Name="Default">{0} is a multidimensional array. Replace it with a jagged array if possible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182277(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="BaseType">The property name {0} is confusing given the existence of inherited method {1}. Rename or remove this property.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182253(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306">
   <Name>Set locale for data types</Name>
   <Description>In most cases, Locale should be explicitly set to CultureInfo.InvariantCulture on DataSet and DataTable instances. Upon creation of a DataSet or DataTable instance, the Locale is set to the current culture. In most cases, the Locale should be set to CultureInfo.InvariantCulture to guarantee proper sorting behavior in all cultures.</Description>
   <Resolution Name="Default">Be sure to set the {0} Locale property wherever {1} creates an instance of that type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182188(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003">
   <Name>Use generic event handler instances</Name>
   <Description>Do not declare new delegates to be used as event handlers when targeting a version of the .NET Framework that supports generics. Use an instance EventHandler&lt;T&gt; instead.</Description>
   <Resolution Name="Default">Remove {0} and replace its usage with EventHandler&lt;T&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182178(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberNoAlternate">Replace the term '{0}' in member name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
