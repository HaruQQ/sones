sones GraphDB 1.2 (developer) Changelog:

01.10.2010
- this version should be compatible with the java client library which can be found on http://github.com/sones/sones-javaclient
- added IEstimable as generic constraint to TValue in AVersionedIndexObject IVersionedIndexObject in favour of AttributeIndex
- Settings SettingObjectDirectoryShards and IndexShards optional parameter for CreateIndex and CreateVertex
- estimated BackwardEdgeStream
- estimated ADictionaryObject 
- added TKey generic type constraint IEstimable 
- estimated DBObjectStream
- ESObjectCache fix
- EsObjectCache upgrades
- added IEstimable as generic type constraint to TValue of ADictionaryObject
- implement an cache using the estimated size of objects (ESObjectCache)
- Estimated DirectoryObject
- made some more generic TValues IEstimable 
- added generic type constraint to AVersionedDictionaryObject (TValue: IEstimable) +fixed tests
- estimated DirectoryEntry
- AFSObject implements IEstimable additionally
- removed references of BackwardEdgeStream and UndefinedAttributeStream from DBObjectStream
- removed some useless constructors in DBObjectStream
- added interface IEstimable 
- IObject implements IEstimable 
- corresponding upgrades in classes which implement IObject
- changes in linux build script
- some small changes in buildscript
- changed build script for linux options for build in release or debug mode
- fixed the count aggregate 
- changed GetKeyCount + GetValueCount signature 
- upgraded UUIDIndex and AttributeIndex to support shards
- upgraded Error_CouldNotGetIndexReference to support IDX shards 
- upgraded AttributeIndex to support index sharding
- Fixed superfluous exception handling when an ObjectLocator does not exist
- minor changes in GetMatchingVertices method
- added GetAllStreamsRecursive method to DBObjectManager 
- fixed rebuild idx
- sharded the UUIDIdx by sharding the Objects directory
- Fixed bug 630 (when an edge is selected the user can add whatever they want after it with dot notation without getting...)
- added a setting for undefined attributes
- Replaced internal edge(s) by new sones.GraphDB.NewAPI.Edge.cs 
- Adapted IGraphIO classes
- ObjectStreams should now be removed from the ObjectCache 
- Vertex, IVertex, Edge, IEdge updates

14.09.2010
- DBObject, Vertex, Edge (user-defined!!!) updates
- Changed DBObject (StringComparer.OrdinalIgnoreCase) => _Attributes = new Dictionary<String, Object>(StringComparer.Ord...
- Rename ObjectCache.cs -> LRUObjectCache.cs
- LRUObjectCache class + a simple test
- removed SelectionSetResult from QueryResult 
- replaced DBObjectReadout by Vertex 
- added DBRevisionID type 
- ObjectUUID on...
- sligthly change in multithreading behaviour of Union and Intersection method within CommonUsageGraph.cs
- Fixed bug of selecting undefined attributes in higher levels
- renamed DBVertex to Vertex
- renamed NewApi.DBVertex to Vertex 
- some minor Vertex and DBObject refactoring
- fixed bug fixed "from DBVertex select * where type=..." vertices always inheritated by DBVertex

10.09.2010
- Fixed bug of selecting undefined attributes in higher levels
- renamed DBVertex to Vertex
- renamed NewApi.DBVertex to Vertex 
- some minor Vertex and DBObject refactoring
- fixed bug fixed "from DBVertex select 
- where type=..." vertices always inheritated by DBVertex
- Implemented StaticSelect
- fixed XML bug
- Added grammar for PBI (527)
- added some vertex traversal functionality
- renamed DBVertex in API to Vertex and added a base type DBVertex
- fixed create types bug (608)
- Refactored GaphDSCLI, replaces old Object stuff with AGraphDSSharp 
- Added GraphDSRESTCLI command to start the GraphDS...
- Moved GraphDSSharp Linq and Traverser stuff into their own extension classes
- Moved a lot of methods from AGraphDSSharp to FluentInterfaceExtensions
- Fixed bug (At DESCRIBE TYPE, the AttributeUUID should be a valid UnsignedInteger)
- refactored QueryResult
- Fixed bug for duplicate aggregate and function with parameters
- extended error handling (FailedAction)
- Removed TypeName from SelectionResultSet (doesn't make sense anymore, because there might be more than one type within ...
- fixed bug set GraphDBType.UUID = GraphDBType.ObjectUUID
- Fixed bug 551 (UPDATE... (ADD TO...) || (REMOVE FROM...) => Warning: Please use += / -=)
- added Traverse* methods to IGraphDB 
- added a GraphDBInterface and a SessionToken to DBObject (to be able to trigger a t...
- Unicode FileHandle fixes
- Moved old GraphDSSharp_RESTClient to GraphDSClient project outsidde from GraphDS
- added some method stubs for Vertex/Path traversal
- renamed UnspecifiedError to Error_Unspecified 
- renamed UnspecifiedWarning to Warning_Unspecified
- minor IError/IWarning bugFix 
- removed graphDBCLient_QueryResult...
- Fixed some error-/warningshandling stuff 
- Added some XML DDT to XML_IO
- upgraded Query method of GraphDSSharp_RESTClient to be able to generate QueryResults that equal the embedded ones 
- added some inline documentation
- Moved old XML AddValidationInformation(...) method from Lib to GraphIO.XML_IO
- IGraphFS clean'up and inline dokumentation 
- Removed notification stuff from GraphFS*
- removed toDBObjectReadout extension on DBObjectStream +refactored DBWeightedReadout 
- there's no ADBaseObject as weight...
- Changed Type attribute of non resolved edges from GraphDBType to String
- implemented simple lazy QueryResult which doesn't care about certain edges or weighted DBObjectReadouts human language and web semantic style for unlink command
- removed obsolete SelectedAttributes from QueryResult
- added empty constructor to GeneralError and GraphDBWarning 
- added GraphDSSharpRestClient_RealQueryResult (currently inc...
- refactored QueryResult (now with GeneralErrors and GraphDBWarnings)
- refactored IGetName (now located at sones.GraphDBInterface.ObjectManagement) 
- changed output of GetTypeReadout (DBTypeM...
- removed networking and lib project reference from GraphDSSharp
- removed GraphDSREST reference from GraphDSSharpREST
- refactored some errors and warnings to GraphDBInterface 
- added IDBContext to GraphDBInterface +refactored DBTransaction...
- removed IRONY reference from DBInterface
- removed using sones.GraphDB.Structures.Result namespace 
- refactored OutputDictionary, OutputList, QueryResultExtensions...
- ReRefactored TypeUUID and AttributeUUID back to GraphDB 
- removed TypeUUID property from ADBBaseObject
- refactored QueryResult (now located at sones.GraphDBInterface.Result)
- Refactored SelectionResultSet (now located at sones.GraphDBInterface.Result)
- refactored Edge (now located at sones.GraphDBInterface.Result)
- refactored DBObjectReadoutGroup and DBWeightedObjectReadout (now located at sones.GraphDBInterface.Result)
- refactored ADBBaseObject (now located in GraphDBInterface.TypeManagement.BasicTypes) 
- moved TypesOfOperatorResult to Gr...
- refactored TypeUUID, AttributeUUID, IObject (now located in GraphDBInterface/TypeManagement)

23.08.2010
- fixed bug 580 (Performance Counter on Windows XP crash)
- reduced warnings

13.08.2010
- implemented AttributeUUID to be a UInt16
- Changed Exceptional.Success|Failed to extension methods in order to check if
Exceptional == null; null -> Failed - Add...
- Fixed bug 554 - Warning on ExecDBScript usage
- AGraphFS improvemens; Added MediaRSS_IO
- Added minimalistic IGraphDB... but still to much internal datastructures
involved!
- select, group and order undefined attributes
- Bugfix for tuple of tuple of tuple ... in where expression
- Some SetBackwardEdges enhancements
- Type independent concatenated functions
- Fixed .../gql?... CSS-bug
- Added IGraphIO, IGraphObjectsIO for I/O of FSObjects 
- Added Serialized_IO in order to replace IFastSerialize in the f...
- GraphDS Clean'ups
- Moved DBVertex, DBEdge, DBPath, ...  from GraphDSSharp to GraphDBInterface
- Moved public GraphDB stuff from GraphDB to GraphDBInterface
- Removed StorageEngine related stuff from GraphFSSession
- Small AutoDiscovery.cs bugfixes
- Lib bugfixes
- Bug fix in select for using graph
- Removed obsolete GraphFS projects
- JSON_IO bugfix
- Moved all ToXML/ToJSON/ToHTML/etc.pp into their own GraphIO solution
- Third part of Attributes on functions
- Added GraphIO projects
- Some AGraphFS and StorageEngines bugfixes

09.08.2010
- some cleanUp
- some ToString upgrades for Reference class
- in case of an abstract type edge the real type of the dbObjects is stored within the reference
- moved CreateAbstractTypeEnvironment method to ATestBase
- minor Rhom/Minus fix
- bugfixing in SelectResultManager
- fixed select * bug
- implement select # and select -
- some edge-serialisation tweaks
- removed TypeUUID from Edges
- Some QueryQL clean'ups... 
- Updated GraphFSEventHandlers/GraphDBEventHandlers
- GraphQL project to query DB via GQL
- some more GetAllEdgeDestinations integration
- Added possibility to subscribe to FSEvents from GraphDS 
- Implemented OnLoad/Loaded/Save/Saved/Remove/Removed within A...
- integrated GetAllEdgeDestinations in RemoveBackwardEdges method
- fixed weakReferences within Reference and DBObjectCache class +upgraded WeakReference test
- ToUNIXDate, FromUNIXDate and EXISTS function

03.08.2010
- fastSerializer refactoring and optimization
- Added LinqQuerable, LinqQueryProver for _very basic_ linq support without complex queries like WHERE-clauses 
and the selection of edges
  + var q = from website in GDB.LinqQuery<Website>("w") select website; // DBVertices
  + var q = from website in GDB.LinqQuery<Website>("w") select website.Name;  // Strings
  + var q = from website in GDB.LinqQuery<Website>("w") select new { newUUID = UUID };  // Anonymous types
- LinqExpressionVisitor class for parsing complex queries to GQL (or calling the appropriate methods on a 
graphdb) still missing
- Refactored SelectToObject => edges currently broken!!!
- Refactored GraphDS interfache for fluent queries and internal usage of DBVertex
- first usage of WeakReferences
- bugfixes
- GetContent refactoring
- added the system types DBVertex, DBEdge
- TransactionNodes, TruncateNode, UpdateNode refactored
- SettingNode refactored
- SelectNode refactored
- minor UUID.GetHashCode() and Equals improvments
- refactored architecture of DBObjectCache
- added ifdef for RunMT (currently runMT = false using mono)
- reimplemented Reference class
- added GetAllEdgeDestinations and GetAllEdgeDestinationsWeighted to IReference
- Changed all TYPE/TYPES statements to alternatively allow VERTEX/VERTICES, e.g. CREATE VERTEX User...
- GetContent refactored & Path bug fixed
- Refactored attribute assign nodes
- Add temporary attribute for non-persisting attributes
- Add DBObject.GetNeighbors(), DBObject.GetEdges(), ...
- Add DBObject.Traversal() method stub
- Add path class for traversal results
- Added DBEdge (like DBObject) as base of all edge types within GraphDSSharp
- Added new version of JIT (JavaScript InfoVis Toolkit) to GraphDSREST/resources/libs...
- Some *GraphFS refactoring...
- Multiple DBObject bugfixes
- Added Set<VertexType, EdgeType>
- Removed IXMLExport on ObjectLocator and INode in favor of a XML_IO_Extension to these classes
- Added robots.txt to REST
- Refactored Nodes DropIndex, Import
- added Reference class
- DescribeNode refactored
- implemented NotImplemented methods within UUIDIndex
- fixed bug on ouput of alter type add indices command
- Replaced TupleValue with TupleDefinition
- renamed Error_CouldAlterIndexOnType to Error_CouldNotAlterIndexOnType
- fixed bug on alter type create index for false type
- alter type define and undefine attributes for GraphDSSharp
- refactored dbIndices to support directoryObject as UUID-idx
- ExpressionNode refactored
- alter type define and undefine attributes
- REST, GEXF_IO Bugfixes
- Added DateTime_to_UNIXTimestamp and vice versa extension
- Updated WebShell to make use of jQuery-1.4.2.min
- alter type add or remove indices in GraphDSSharp 
- Added /resources handler to REST for all libs and sonoeslogos etc.pp
- Split all into even more JavaScript files
- Split WebShell.html into WebShell.html, WebShell.js (more or less JQuery.js + extensions) and goosh.js
- Refactored IDNode
- browser part of GEXF output
- Added jquery and protovis license files
- change for alter type command
- execute a list of instructions like (ADD ATTRIBUTES, DROP ATTRIBUTES)
- refactored LevelKey constructors + operators (now as functions)
- Changed GEXF stuff to be embedded resources
- Added GraphDSREST "/GEXFResources/{myResource}" handler
- Added GEXF_IO, GEXF_IO_Extensions stub
- Added /gexf?FROM+Website+w+SELECT+*+WHERE+w.Name+%3d+%27xkcd%27 handler to GraphDSREST
- Added (JavaScript) files of gexf4js to GraphDSREST/GEXF
- Added GexfExplorer1.0.swf FlashVisualization tool
- Fixed Bug_CouldNotDetermineJSON_ObjectUUID bug
- Some refactoring within GraphDBType and TypeAttribute... added IGetName interface
- Used IGetName interface within JSON_IO and XML_IO
- Refactor DeleteNode I
- ATypeNode and TypeList refactored
- Refactored CreateTypesNode
- Refactored CreateIndexNode
- AlterTypeNode refactored


31.07.2010
- bugfix in bplustree leafnode (reference to rightmost leaf was not updated correctly)

23.07.2010
- fixed: ExpressionGraph contained more edge information than selected

20.07.2010
- Changed result of PATH algorithm to containing NOT the starting element!
- fixed sonesCLI to display RAM usage and used CPU time on mono
- commented OnItemRemoved out because of mono trunk incompatiblity

19.07.2010
- Fixed Bug: Empty type information in path result
- Fixed Bug: Error in AND Operator with IN - Operation

15.07.2010
- Fixed Bug 497 (Crunchbase Path Search over Competitions throws exception)
- removed console output from BFS Graph Algorithm, breaks linux daemon

14.07.2010
- Fixed Bug_CouldNotDetermineJSON_ObjectUUID bug
- Some refactoring within GraphDBType and TypeAttribute... added IGetName interface
- Used IGetName interface within JSON_IO and XML_IO

08.07.2010
- Fixed IMPORT http:// bug; Added begin transaction to import
- new special type attributes MAXNUMBEROFCOPIES, MAXNUMBEROFREVISIONS, MAXREVISIONAGE, MINNUMBEROFCOPIES, NUMBEROFCOPIES, NUMBEROFREVISIONS, PARENTREVISIONS, MINNUMBEROFREVISIONS
- Return NotResolvedReferenceAttributeValues on function result
- Fix NullReference exception for not found Url in WebServerInterface definition
- Fixed error creation on SelectToObjectGraph
- IExtendableGrammar for aggregates and functions
- Add indices to grammar
- Changed dump to use SETOFUUIDS instead of updates
- Use slow index operation of InOperator ONLY for index keys of List/Set of base objects
- Fixed error message of delete with not existing attribute in where expression
- Fixed error message of update and insertOr* with not existing attribute in where expression
- Bugfix empty edge in select and expressiongraph for not existing backwardedge attribute (KeyNotFoundException)
- fixed bug in assignment of default attributes
- Import escape bugfix
- fixed bug: ambiguous attribute name on a type creation
- Renamed PandoraTypeMapper to GraphDBTypeMapper
- GraphQL simplifications, AGraphDSSharp improvements
- Dump changes ([TYPES ...], [INTO/TO ...])
- Fixed Bug 486: Wrong IDNode for BackwardEdge reference
- Dump error handling
- Added favicon to rest
- Allow file:\\\ as valid dump destination prefix 
- Changed GQL (optional currently)
 - TRUNCATE Nutzer -> TRUNCATE TYPE Nutzer
 - CREATE TYPE ... INDICES(...ON Nutzer) ->CREATE TYPE ... INDICES(...ON TYPE Nutzer)
 - CREATE INDEX ... ON Nutzer ->CREATE INDEX ... ON TYPE Nutzer
- Add line number for failed import
- Add warnings for obsolete usage of INDICES and TRUNCATE

