using System;
using System.Collections.Generic;
using System.IO;

namespace sones.GraphDB.Request
{
    /// <summary>
    /// The vertex insert definition
    /// 
    /// This class contains the properties/edges/etc of a new vertex
    /// </summary>
    public sealed class VertexInsert
    {
        #region data

        /// <summary>
        /// Determines whether the vertex name has been autogenerated
        /// </summary>
        public readonly Boolean IsUserGeneratedName;

        /// <summary>
        /// The name of the vertex
        /// </summary>
        public readonly String VertexName;

        /// <summary>
        /// The name of the vertex type that is going to be inserted
        /// </summary>
        public readonly String VertexTypeName;

        /// <summary>
        /// The well defined properties of a vertex
        /// </summary>
        public Dictionary<String, Object> StructuredProperties { get; private set; }

        /// <summary>
        /// The unstructured part of a vertex
        /// </summary>
        public Dictionary<String, Object> UnstructuredProperties { get; private set; }

        /// <summary>
        /// The binaries of a vertex
        /// </summary>
        public Dictionary<String, Stream> BinaryProperties { get; private set; }

        /// <summary>
        /// The outgoing edges of a vertex
        /// </summary>
        public Dictionary<String, EdgeDefinition> OutgoingEdges { get; private set; }

        #endregion

        #region constructor

        /// <summary>
        /// Creates a new vertex-insert-definition
        /// </summary>
        /// <param name="myVertexTypeName">The name of the vertex type</param>
        /// <param name="myVertexName">The name of the vertex</param>
        public VertexInsert(String myVertexTypeName, String myVertexName = null)
        {
            VertexTypeName = myVertexTypeName;

            if (myVertexName == null)
            {
                IsUserGeneratedName = true;
                VertexName = Guid.NewGuid().ToString();
            }
            else
            {
                VertexName = myVertexName;
            }

            #region initialize

            StructuredProperties = new Dictionary<string, object>();
            UnstructuredProperties = new Dictionary<string, object>();
            BinaryProperties = new Dictionary<string, Stream>();
            OutgoingEdges = new Dictionary<string, EdgeDefinition>();

            #endregion
        }

        #endregion

        #region Fluent interface

        /// <summary>
        /// Adds a new structured property
        /// </summary>
        /// <param name="myPropertyName">The name of the property</param>
        /// <param name="myProperty">The value of the property</param>
        /// <returns>The updated vertex insert</returns>
        public VertexInsert AddStructuredProperty(String myPropertyName, Object myProperty)
        {
            StructuredProperties.Add(myPropertyName, myProperty);

            return this;
        }

        /// <summary>
        /// Adds a new unstructured property
        /// </summary>
        /// <param name="myPropertyName">The name of the property</param>
        /// <param name="myProperty">The value of the property</param>
        /// <returns>The updated vertex insert</returns>
        public VertexInsert AddUnstructuredProperty(String myPropertyName, Object myProperty)
        {
            UnstructuredProperties.Add(myPropertyName, myProperty);

            return this;
        }

        /// <summary>
        /// Adds a new binary property
        /// </summary>
        /// <param name="myPropertyName">The name of the property</param>
        /// <param name="myStream">The value of the property</param>
        /// <returns>The updated vertex insert</returns>
        public VertexInsert AddBinaryProperty(String myPropertyName, Stream myStream)
        {
            BinaryProperties.Add(myPropertyName, myStream);

            return this;
        }

        /// <summary>
        /// Adds a new edge to the vertex defintion
        /// </summary>
        /// <param name="myEdgeName">The name of the edge to be inserted</param>
        /// <param name="myEdgeDefinition">The definition of the edge</param>
        /// <returns>The updated vertex insert</returns>
        public VertexInsert AddEdge(String myEdgeName, EdgeDefinition myEdgeDefinition)
        {
            AddEdge(myEdgeName, myEdgeDefinition);

            return this;
        }

        #endregion
    }
}