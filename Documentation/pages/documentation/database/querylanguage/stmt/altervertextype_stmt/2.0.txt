[[documentation:graphql:gdml|Back to: Graph Data Manipulation Language Overview]]

====== ALTER VERTEX TYPE ======
The alter vertex type statement allows you to manipulate user-defined-types.

If you want to know what is about the GraphDS and how it handles graphs you should check out the [[quickreference:fiveminuteguide|five minute guide]],

===== Syntax =====

ALTER VERTEX TYPE [[documentation:database:querylanguage:stmt:altervertextype_stmt:2.0#typename]] [ [[documentation:database:querylanguage:stmt:altervertextype_stmt:2.0#altertypecommand]] ]

==== typeName ====

The name of the type that is to be manipulate. 


==== AlterVertexTypeCommand ====

Types of alter type commands.

  * ADD ATTRIBUTES ( [[documentation:database:querylanguage:attributedefinition:latest|attr_definition]] [, [[documentation:database:querylanguage:attributedefinition:latest|attr_definition]] ] ) | \\
  * DROP ATTRIBUTES ( Identifier [,Identifier] ) | \\
  * ADD INCOMINGEDGES ( IncomingEdge[,IncomingEdge] ) | \\
  * DROP INCOMINGEDGES ( Identifier [,Identifier] ) | \\
  * ADD INDICES ( [[documentation:database:querylanguage:indexdefinition:latest|IndexDefinition]] [,   [[documentation:database:querylanguage:indexdefinition:latest|IndexDefinition]] ] ) | \\
  * DROP INDICES ( ( IndexDrop ) [,( IndexDrop )] ) | \\
  * RENAME ATTRIBUTE Identifier TO Identifier | \\
  * RENAME INCOMINGEDGES Identifier TO Identifier | \\
  * RENAME TO Identifier | \\
  * DEFINE ATTRIBUTES ( [[documentation:database:querylanguage:attributedefinition:latest|attr_definition]] [, [[documentation:database:querylanguage:attributedefinition:latest|attr_definition]]] ) | \\
  * UNDEFINE ATTRIBUTES ( Identifier [, Identifier] ) | \\
  * DROP UNIQUE | \\
  * DROP MANDATORY | \\
  * UNIQUE ( Identifier [,Identifier] ) | \\
  * MANDATORY ( Identifier [,Identifier] )

----

IndexAttributeList =

Identifier | id_typeAndAttribute


----


IndexDrop =

(Identifier [EDITION Identifier])[, (Identifier [EDITION Identifier])] 


----

===== QueryResult =====
The QueryResult of the ALTER VERTEX query will contain
  * The executed query
  * The result: Successful | Failed
  * The duration in ms (the time which needs the query to be executed in the database)
  * The errors (if result is //Failed//)
  * The results contains **for each** alter command
    * Properties
    * Edges

sample json output:
<code json>
{
  "Query": "ALTER VERTEX TYPE UserProfile ADD ATTRIBUTES (String Name)",
  "Result": "Successful",
  "Duration": [
    12,
    "ms"
  ],
  "Results": [
    [
      {
        "Properties": {
          "VertexType": "UserProfile",
          "VertexTypeID": "-9223372036854775797"
        }
      },
      {
        "Edges": []
      }
    ]
  ]
}
</code>

===== Examples =====


----


ALTER VERTEX TYPE User ADD ATTRIBUTES (Int32 Age, SET<User> Friends) \\ \\
This example add the two attributes to type User. The attribute Age of type Integer  and the attribute Friends of type User. \\

----

ALTER VERTEX TYPE User DROP ATTRIBUTES (Age, Friends) \\ \\
Drop the two attributes Age and Friends from type User. \\

----

ALTER VERTEX TYPE User ADD INCOMINGEDGES(User.Friends BestFriend) \\ \\
Add the incoming edge BestFriend to the type User.

----

ALTER VERTEX TYPE User DROP INCOMINGEDGES(BestFriend) \\ \\
Drop incoming edge BestFriend from type User. \\

----

ALTER VERTEX TYPE User ADD INDICES ( (Idx_Age INDEXTYPE SingleValueIndex ON ATTRIBUTES Name ), (Age) ) \\ \\
Add indices for the attributes Name and Age to the type User. The index for the attribute Name has the name IDX_Name and the edition EDTName and is from index type BPlusTree. \\


----

ALTER VERTEX TYPE User DROP INDICES(Idx_Age)  \\ \\
Drop the indices IDX_Name and Idx_Age from the attributes Name and Age of the type User. \\


----

ALTER VERTEX TYPE User RENAME ATTRIBUTES Name TO FirstName \\ \\
Rename the attribute Name of the type User to FirstName. \\


----

ALTER VERTEX TYPE User RENAME INCOMINGEDGES BestFriend TO IsFriend \\ \\
Rename the incoming edge BestFriend of the type User IsFriend. \\


----

ALTER VERTEX TYPE User RENAME TO Person \\ \\
Rename the type User to Person. Its only an renaming of the type User to Person. All type characteristics are retained. \\ 


----

ALTER VERTEX TYPE User DEFINE ATTRIBUTES(Undefined1, Undefined2) \\ \\
Define undefined attributes and convert the content to the given type. \\


----

ALTER VERTEX TYPE User UNDEFINE ATTRIBUTES(Undefined1, Undefined2) \\ \\
Undefine the defined attributes of the type Use. The content of the attributes converted to an undefined content. After the conversion the attributes Name and Age are not available. \\


----

ALTER VERTEX TYPE User UNIQUE (Name) \\ \\
Define the attribute Name of the type User as unique. All inserted values must be unique. \\


----

ALTER VERTEX TYPE User MANDATORY (Age) \\ \\
Define the attribute Age to mandatory. The attribute must be set on every insert or update statement. \\


----

Return on success

The return value depends on the altertype command.

